;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: TrashMessage
;; Header: 0x7572f318
;; TLB: trash_message#7572f318 str:^string to:address = TrashMessage
;;

(slice, ((slice, slice))) $TrashMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1970467608);
    var v'str = sc_0~load_ref().begin_parse();
    var v'to = sc_0~__tact_load_address();
    return (sc_0, (v'str, v'to));
}

;;
;; Type: ChangeTCOwner
;; Header: 0xcdb5cc1b
;; TLB: change_tc_owner#cdb5cc1b address:address = ChangeTCOwner
;;

(slice, ((slice))) $ChangeTCOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3451243547);
    var v'address = sc_0~__tact_load_address();
    return (sc_0, (v'address));
}

;;
;; Type: LastMessage
;; TLB: _ last_message:Maybe ^string last_sender:Maybe address last_receiver:Maybe address = LastMessage
;;

(slice, slice, slice) $LastMessage$_to_external(((slice, slice, slice)) v) inline {
    var (v'last_message, v'last_sender, v'last_receiver) = v; 
    return (v'last_message, v'last_sender, v'last_receiver);
}

((slice, slice, slice)) $LastMessage$_constructor_last_message_last_sender_last_receiver(slice last_message, slice last_sender, slice last_receiver) inline {
    return (last_message, last_sender, last_receiver);
}

;;
;; Type: MainGarbageBin
;;

builder $MainGarbageBin$_store(builder build_0, (slice, int, slice, slice, slice, cell, cell) v) inline {
    var (v'owner, v'count, v'last_message, v'last_sender, v'last_receiver, v'user_list, v'fund) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'count, 257);
    build_0 = ~ null?(v'last_message) ? build_0.store_int(true, 1).store_ref(begin_cell().store_slice(v'last_message).end_cell()) : build_0.store_int(false, 1);
    build_0 = __tact_store_address_opt(build_0, v'last_sender);
    var build_1 = begin_cell();
    build_1 = __tact_store_address_opt(build_1, v'last_receiver);
    build_1 = build_1.store_dict(v'user_list);
    build_1 = build_1.store_dict(v'fund);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, slice, slice, slice, cell, cell))) $MainGarbageBin$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'count = sc_0~load_int(257);
    var v'last_message = sc_0~load_int(1) ? sc_0~load_ref().begin_parse() : null();
    var v'last_sender = sc_0~__tact_load_address_opt();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'last_receiver = sc_1~__tact_load_address_opt();
    var v'user_list = sc_1~load_dict();
    var v'fund = sc_1~load_dict();
    return (sc_0, (v'owner, v'count, v'last_message, v'last_sender, v'last_receiver, v'user_list, v'fund));
}

(slice, ((slice))) $MainGarbageBin$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

(slice, int, slice, slice, slice, cell, cell) $MainGarbageBin$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MainGarbageBin$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice owner) = $sc~$MainGarbageBin$init$_load();
        $sc.end_parse();
        return $MainGarbageBin$_contract_init(owner);
    }
}

() $MainGarbageBin$_contract_store((slice, int, slice, slice, slice, cell, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $MainGarbageBin$_store(b, v);
    set_data(b.end_cell());
}